{"version":3,"file":"static/js/677.853ef039.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/EditSpan.tsx","components/Profile/Post/Post.tsx","components/Button/Btn.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/MyProfile.tsx","components/Profile/ProfileForm.tsx","components/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Profile_wrapper__p5VrH\",\"photo\":\"Profile_photo__vdZH8\",\"info\":\"Profile_info__Vci11\",\"description\":\"Profile_description__WYmjn\",\"avatar\":\"Profile_avatar__YVqzY\",\"container\":\"Profile_container__56z6O\",\"pencil\":\"Profile_pencil__aPzX3\",\"inputFile\":\"Profile_inputFile__JF4Ga\",\"edit\":\"Profile_edit__bwzCR\",\"posts\":\"Profile_posts__aiWvK\",\"postsButton\":\"Profile_postsButton__fwxLC\",\"area\":\"Profile_area__4mSAZ\"};","import {ChangeEvent, useState} from \"react\";\r\nimport s from '../Profile/Profile.module.css';\r\nimport {Input} from \"@mui/material\";\r\n\r\ntype EditSpanPropsType={\r\n    title:string,\r\n    changeEditSpan:(value:string)=>void\r\n\r\n}\r\nexport const EditSpan=(props:EditSpanPropsType)=>{\r\n    let [onDouble, setonDouble]=useState(false)\r\n    let [value, setValue]=useState('')\r\n\r\n    const onDoubleClickHandler=()=>{\r\n        setValue(props.title)\r\n        setonDouble(true)\r\n    }\r\n    const onBlurInputHandler=()=>{\r\n        setonDouble(false)\r\n        props.changeEditSpan(value)\r\n    }\r\n\r\n    const onChangeInputHandler=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setValue(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.editField}>\r\n            {onDouble ?\r\n                <Input onBlur={onBlurInputHandler} onChange={onChangeInputHandler} value={value} autoFocus color={\"primary\"} inputProps={{\r\n                    style: {\r\n                        color: 'rgb(17,193,253)'\r\n                    }\r\n                }}/>\r\n                :\r\n                <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport s from '../Profile.module.css'\r\nimport {Btn} from \"../../Button/Btn\";\r\nimport {PostType, ProfileStateType} from \"../../../state/profile-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../state/store\";\r\n\r\n\r\ntype PostPropsType={\r\n    text:Array<PostType>\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n\r\n    let profile=useSelector<RootStateType, ProfileStateType>((state) => state.profile)\r\n    return (\r\n        <div>\r\n            {props.text.map((p,index)=>{\r\n                return (\r\n                    <div key={index}>\r\n                        <div className={s.avatar}>\r\n                            <img src={profile.profile.photos.small}\r\n                                 alt={'avatar1'}/>\r\n                            <span>{p.message}</span>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from \"../Profile/Profile.module.css\";\r\n\r\ntype BtnPropsType={\r\n    title:string\r\n    onChangePost?:()=>void\r\n}\r\n\r\nexport const Btn = (props:BtnPropsType) => {\r\n    return (\r\n        <div className={s.postsButton}>\r\n            <button onClick={props.onChangePost}>{props.title}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Post} from \"../Post/Post\";\r\nimport {Btn} from \"../../Button/Btn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../state/store\";\r\nimport {addPostAC, ProfileStateType} from \"../../../state/profile-reducer\";\r\nimport s from \"../Profile.module.css\";\r\n\r\n\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n\r\n    let dispatch=useDispatch()\r\n    let profile=useSelector<RootStateType, ProfileStateType>((state)=>state.profile)\r\n    let allPosts=profile.posts\r\n    let [newPost, setNewPost]=useState('')\r\n    let [isOpen, setIsOpen]=useState(false)\r\n\r\n    const onChangeTextareaHandler=(event:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        setNewPost(event.currentTarget.value)\r\n    }\r\n    const onChangePostHandler=()=>{\r\n        dispatch(addPostAC(newPost))\r\n        setNewPost('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.posts}>\r\n            <h1 onClick={()=>setIsOpen(!isOpen)}>My posts {isOpen?'👆':'👇'}</h1>\r\n            {isOpen && <Post text={allPosts}/>}\r\n            <div className={s.area}>\r\n            <textarea value={newPost} onChange={onChangeTextareaHandler} placeholder={'Enter new post'}></textarea>\r\n            <Btn title='Send' onChangePost={onChangePostHandler}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from \"../Profile.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {DispatchActionType, RootStateType} from \"../../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {EditSpan} from \"../EditSpan\";\r\nimport {\r\n    ChangeProfilePhotoTC,\r\n    changeStatusTC,\r\n    getStatusTC,\r\n    ProfileStateType,\r\n    setCheckedUserTC\r\n} from \"../../../state/profile-reducer\";\r\nimport {ProfileForm} from \"../ProfileForm\";\r\nimport {Posts} from \"./Posts\";\r\n\r\ntype MyProfilePropsType={\r\n    changeProfile:()=>void\r\n    mode:boolean\r\n}\r\nexport const MyProfile = (props:MyProfilePropsType) => {\r\n    let isAuth=  useSelector<RootStateType, boolean>((state) => state.auth.isAuth)\r\n    let myUserId=useSelector<RootStateType, number|null>((state) => state.auth.authData.id)\r\n    // let editSpanTitle=  useSelector<RootStateType, string>((state) => state.profile.status)\r\n    let profile=useSelector<RootStateType, ProfileStateType>((state) => state.profile)\r\n    let editSpanTitle=profile.status\r\n\r\n    let dispatch=useDispatch<DispatchActionType>()\r\n    const changeEditSpan=(value:string)=>{\r\n        dispatch(changeStatusTC(value))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(setCheckedUserTC(myUserId))\r\n        dispatch(getStatusTC(myUserId))\r\n    }, []);\r\n    const ChangeFileHandler=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        if (e.target.files?.length){\r\n            dispatch(ChangeProfilePhotoTC(e.target.files[0]))\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={props.mode ? s.wrapper : s.edit}>\r\n\r\n            <div className={s.photo}>\r\n                <img src={profile.profile.photos.large} alt={'photo'}/>\r\n                <div>\r\n                    <EditSpan title={editSpanTitle} changeEditSpan={changeEditSpan}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.container}>\r\n                <input className={s.inputFile} type={\"file\"} onChange={(e) => ChangeFileHandler(e)}/>\r\n                <span className={s.pencil}>edit</span>\r\n            </div>\r\n            <div className={s.info}>\r\n                <div className={s.description}>\r\n                    <div>\r\n                        About me: {profile.profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        Looking for a job: {profile.profile.lookingForAJob ? 'Yes' : 'No'}\r\n                    </div>\r\n                    <div>\r\n                        Looking for a job description: {profile.profile.lookingForAJobDescription}\r\n                    </div>\r\n                    <div>\r\n                        Contacts:\r\n                        <div>\r\n                            <a href={`${profile.profile.contacts.github}`}>GitHub</a>\r\n                            <a href={`${profile.profile.contacts.instagram}`}>Instagram</a>\r\n                        </div>\r\n                    </div>\r\n                    <button onClick={props.changeProfile}>✏️</button>\r\n                </div>\r\n                <Posts/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {RootStateType} from \"../../state/store\";\r\nimport {changeProfileTC, ProfileStateType} from \"../../state/profile-reducer\";\r\nimport './Profile.module.css';\r\n\r\n// type ProfileFormErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\ntype ProfileFormPropsType={\r\n    closeForm:()=>void\r\n}\r\nexport type ProfileType= {\r\n    aboutMe:string | null\r\n    userId: number | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    contacts: {\r\n        github: string | null\r\n        vk: string | null\r\n        facebook: string | null\r\n        instagram: string | null\r\n        twitter: string | null\r\n        website: string | null\r\n        youtube: string | null\r\n        mainLink: string | null\r\n    }\r\n}\r\nexport const ProfileForm = (props:ProfileFormPropsType) => {\r\n    let dispatch=useDispatch()\r\n    let profileInfo=useSelector<RootStateType,ProfileStateType>((state)=>state.profile)\r\n    let userId=useSelector<RootStateType,number|null>((state)=>state.auth.authData.id)\r\n\r\n    const exitHandle=()=>{\r\n        props.closeForm()\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            aboutMe:profileInfo.profile.aboutMe,\r\n            userId: userId,\r\n            lookingForAJob: profileInfo.profile.lookingForAJob,\r\n            lookingForAJobDescription: profileInfo.profile.lookingForAJobDescription,\r\n            fullName: profileInfo.profile.fullName,\r\n            contacts: {\r\n                github: profileInfo.profile.contacts.github,\r\n                vk: profileInfo.profile.contacts.vk,\r\n                facebook: profileInfo.profile.contacts.facebook,\r\n                instagram: profileInfo.profile.contacts.instagram,\r\n                twitter: profileInfo.profile.contacts.twitter,\r\n                website: profileInfo.profile.contacts.website,\r\n                youtube: profileInfo.profile.contacts.youtube,\r\n                mainLink: profileInfo.profile.contacts.mainLink\r\n        }},\r\n        // validate: (values) => {\r\n        //     const errors: ProfileFormErrorType = {}\r\n        //     if (!values.lookingForAJob) {\r\n        //         errors.email = 'Required'\r\n        //     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.lookingForAJob)) {\r\n        //         errors.email = 'Invalid email address'\r\n        //     }\r\n        //     if (!values.password){\r\n        //         errors.password = 'Required'\r\n        //     }\r\n        //     return errors\r\n        // },\r\n        onSubmit: values => {\r\n            dispatch(changeProfileTC(values))\r\n            props.closeForm()\r\n        },\r\n    })\r\n          return (\r\n            <Grid container justifyContent={'center'} style={{position:'absolute', zIndex:'999', marginTop:'10px'}}>\r\n                <Grid item justifyContent={'center'}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <FormControlLabel label={'Looking for a job'} control={<Checkbox\r\n                                    checked={formik.values.lookingForAJob} {...formik.getFieldProps('lookingForAJob')}/>}/>\r\n\r\n                                <TextField type=\"lookingForAJobDescription\" label=\"Looking for a job description\"\r\n                                           margin=\"normal\" {...formik.getFieldProps('lookingForAJobDescription')}/>\r\n                                {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                                    <div style={{color: 'red'}}>{formik.errors.lookingForAJobDescription}</div>}\r\n\r\n                                <TextField type=\"aboutme\" label=\"About Me\"\r\n                                           margin=\"normal\" {...formik.getFieldProps('aboutMe')}/>\r\n                                {formik.touched.lookingForAJobDescription && formik.errors.aboutMe &&\r\n                                    <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>}\r\n\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'} style={{marginBottom:'10px'}}>\r\n                                    Submit\r\n                                </Button>\r\n                                <Button variant={'contained'} color={'primary'} style={{marginTop:'10px'}} onClick={()=>exitHandle()}>\r\n                                    Exit\r\n                                </Button>\r\n\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './Profile.module.css';\r\nimport {MyProfile} from \"./Posts/MyProfile\";\r\nimport {ProfileForm} from \"./ProfileForm\";\r\n\r\n\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    let [mode, setMode]=useState(true)\r\n    const changeProfile=()=>{\r\n        setMode(false)\r\n    }\r\n    const closeForm=()=>{\r\n\r\n        setMode(true)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!mode && <div className={s.form}><ProfileForm closeForm={closeForm}/></div>}\r\n            <MyProfile mode={mode} changeProfile={changeProfile}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile"],"names":["EditSpan","props","useState","onDouble","setonDouble","value","setValue","className","s","Input","onBlur","changeEditSpan","onChange","e","currentTarget","autoFocus","color","inputProps","style","onDoubleClick","title","Post","profile","useSelector","state","text","map","p","index","src","photos","small","alt","message","Btn","onClick","onChangePost","Posts","dispatch","useDispatch","allPosts","posts","newPost","setNewPost","isOpen","setIsOpen","event","placeholder","addPostAC","MyProfile","isAuth","auth","myUserId","authData","id","editSpanTitle","status","useEffect","setCheckedUserTC","getStatusTC","mode","large","changeStatusTC","type","target","files","length","ChangeProfilePhotoTC","ChangeFileHandler","aboutMe","lookingForAJob","lookingForAJobDescription","href","contacts","github","instagram","changeProfile","to","ProfileForm","profileInfo","userId","formik","useFormik","initialValues","fullName","vk","facebook","twitter","website","youtube","mainLink","onSubmit","values","changeProfileTC","closeForm","Grid","container","justifyContent","position","zIndex","marginTop","item","handleSubmit","FormControl","FormGroup","FormControlLabel","label","control","Checkbox","checked","getFieldProps","TextField","margin","touched","errors","Button","variant","marginBottom","setMode"],"sourceRoot":""}