{"version":3,"file":"static/js/677.6b648ef6.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Button/Btn.tsx","components/Profile/Post/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/EditSpan.tsx","components/Profile/Posts/MyProfile.tsx","components/Profile/ProfileForm.tsx","components/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__nAwHv\",\"photo\":\"Profile_photo__vdZH8\",\"avatar\":\"Profile_avatar__YVqzY\",\"form\":\"Profile_form__6YUml\",\"edit\":\"Profile_edit__bwzCR\"};","import React from 'react';\r\n\r\ntype BtnPropsType={\r\n    title:string\r\n    onChangePost?:()=>void\r\n}\r\n\r\nexport const Btn = (props:BtnPropsType) => {\r\n    return (\r\n        <div>\r\n            <button onClick={props.onChangePost}>{props.title}</button>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from '../Profile.module.css'\r\nimport {Btn} from \"../../Button/Btn\";\r\nimport {PostType} from \"../../../state/profile-reducer\";\r\n\r\n\r\ntype PostPropsType={\r\n    text:Array<PostType>\r\n}\r\n\r\nexport const Post = (props:PostPropsType) => {\r\n    return (\r\n        <div>\r\n            {props.text.map((p,index)=>{\r\n                return (\r\n                    <div key={index}>\r\n                        <div className={s.avatar}>\r\n                            <img src={'https://pixelbox.ru/wp-content/uploads/2021/05/ava-vk-animal-91.jpg'}\r\n                                 alt={'avatar1'}/>\r\n                            <span>{p.message}</span>\r\n                        </div>\r\n                        <Btn title='Like'/>\r\n                    </div>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {Post} from \"../Post/Post\";\r\nimport {Btn} from \"../../Button/Btn\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../state/store\";\r\nimport {addPostAC, ProfileStateType} from \"../../../state/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\nexport const Posts = () => {\r\n\r\n    let dispatch=useDispatch()\r\n\r\n    let profile=useSelector<RootStateType, ProfileStateType>((state)=>state.profile)\r\n    let allPosts=profile.posts\r\n    let [newPost, setNewPost]=useState('')\r\n\r\n    const onChangeTextareaHandler=(event:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        setNewPost(event.currentTarget.value)\r\n\r\n    }\r\n\r\n    const onChangePostHandler=()=>{\r\n        dispatch(addPostAC(newPost))\r\n        setNewPost('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>My posts</h1>\r\n            <textarea value={newPost} onChange={onChangeTextareaHandler}></textarea>\r\n            <Btn title='Send' onChangePost={onChangePostHandler}/>\r\n            <Post text={allPosts}/>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@mui/material\";\r\n\r\ntype EditSpanPropsType={\r\n    title:string,\r\n    changeEditSpan:(value:string)=>void\r\n\r\n}\r\nexport const EditSpan=(props:EditSpanPropsType)=>{\r\n    let [onDouble, setonDouble]=useState(false)\r\n    let [value, setValue]=useState('')\r\n\r\n    const onDoubleClickHandler=()=>{\r\n        setValue(props.title)\r\n        setonDouble(true)\r\n    }\r\n    const onBlurInputHandler=()=>{\r\n        setonDouble(false)\r\n        props.changeEditSpan(value)\r\n    }\r\n\r\n    const onChangeInputHandler=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setValue(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {onDouble ?\r\n                <Input onBlur={onBlurInputHandler} onChange={onChangeInputHandler} value={value} autoFocus color={\"secondary\"}/>\r\n                :\r\n                <span onDoubleClick={onDoubleClickHandler}>{props.title}</span>\r\n            }\r\n        </>\r\n    );\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from \"../Profile.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {DispatchActionType, RootStateType} from \"../../../state/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {EditSpan} from \"../EditSpan\";\r\nimport {\r\n    ChangeProfilePhotoTC,\r\n    changeStatusTC,\r\n    getStatusTC,\r\n    ProfileStateType,\r\n    setCheckedUserTC\r\n} from \"../../../state/profile-reducer\";\r\nimport {ProfileForm} from \"../ProfileForm\";\r\n\r\ntype MyProfilePropsType={\r\n    changeProfile:()=>void\r\n    mode:boolean\r\n}\r\nexport const MyProfile = (props:MyProfilePropsType) => {\r\n    let isAuth=  useSelector<RootStateType, boolean>((state) => state.auth.isAuth)\r\n    let myUserId=useSelector<RootStateType, number|null>((state) => state.auth.authData.id)\r\n    // let editSpanTitle=  useSelector<RootStateType, string>((state) => state.profile.status)\r\n    let profile=useSelector<RootStateType, ProfileStateType>((state) => state.profile)\r\n    let editSpanTitle=profile.status\r\n\r\n    let dispatch=useDispatch<DispatchActionType>()\r\n    const changeEditSpan=(value:string)=>{\r\n        dispatch(changeStatusTC(value))\r\n    }\r\n    useEffect(() => {\r\n        dispatch(setCheckedUserTC(myUserId))\r\n        dispatch(getStatusTC(myUserId))\r\n    }, []);\r\n    const ChangeFileHandler=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        if (e.target.files?.length){\r\n            dispatch(ChangeProfilePhotoTC(e.target.files[0]))\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <div className={props.mode?'':s.edit}>\r\n            <img\r\n                src={'https://fikiwiki.com/uploads/posts/2022-02/1644965580_6-fikiwiki-com-p-kartinki-priroda-na-zastavku-telefona-6.jpg'}\r\n                alt={'main pict'}/>\r\n            <div className={s.photo}>\r\n                <img src={profile.profile.photos.large} alt={'photo'}/>\r\n            </div>\r\n            <input type={\"file\"} onChange={(e)=>ChangeFileHandler(e)}></input>\r\n            <div>\r\n                About me: {profile.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                Looking for a job: {profile.profile.lookingForAJob?'Yes':'No'}\r\n            </div>\r\n            <div>\r\n                Looking for a job description: {profile.profile.lookingForAJobDescription}\r\n            </div>\r\n            <div>\r\n                Contacts: <a href={`${profile.profile.contacts.github}`}>GitHub</a>\r\n                <div>\r\n                    <a href={`${profile.profile.contacts.instagram}`}>Instagram</a>\r\n                </div>\r\n\r\n            </div>\r\n            <button onClick={props.changeProfile}>Edit</button>\r\n            <div>\r\n                <EditSpan title={editSpanTitle} changeEditSpan={changeEditSpan}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, Grid, TextField} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {RootStateType} from \"../../state/store\";\r\nimport {changeProfileTC, ProfileStateType} from \"../../state/profile-reducer\";\r\n\r\n// type ProfileFormErrorType = {\r\n//     email?: string\r\n//     password?: string\r\n//     rememberMe?: boolean\r\n// }\r\ntype ProfileFormPropsType={\r\n    closeForm:()=>void\r\n}\r\nexport type ProfileType= {\r\n    aboutMe:string | null\r\n    userId: number | null\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string | null\r\n    fullName: string\r\n    contacts: {\r\n        github: string | null\r\n        vk: string | null\r\n        facebook: string | null\r\n        instagram: string | null\r\n        twitter: string | null\r\n        website: string | null\r\n        youtube: string | null\r\n        mainLink: string | null\r\n    }\r\n}\r\nexport const ProfileForm = (props:ProfileFormPropsType) => {\r\n    let dispatch=useDispatch()\r\n    let profileInfo=useSelector<RootStateType,ProfileStateType>((state)=>state.profile)\r\n    let userId=useSelector<RootStateType,number|null>((state)=>state.auth.authData.id)\r\n\r\n    const exitHandle=()=>{\r\n        props.closeForm()\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            aboutMe:profileInfo.profile.aboutMe,\r\n            userId: userId,\r\n            lookingForAJob: profileInfo.profile.lookingForAJob,\r\n            lookingForAJobDescription: profileInfo.profile.lookingForAJobDescription,\r\n            fullName: profileInfo.profile.fullName,\r\n            contacts: {\r\n                github: profileInfo.profile.contacts.github,\r\n                vk: profileInfo.profile.contacts.vk,\r\n                facebook: profileInfo.profile.contacts.facebook,\r\n                instagram: profileInfo.profile.contacts.instagram,\r\n                twitter: profileInfo.profile.contacts.twitter,\r\n                website: profileInfo.profile.contacts.website,\r\n                youtube: profileInfo.profile.contacts.youtube,\r\n                mainLink: profileInfo.profile.contacts.mainLink\r\n        }},\r\n        // validate: (values) => {\r\n        //     const errors: ProfileFormErrorType = {}\r\n        //     if (!values.lookingForAJob) {\r\n        //         errors.email = 'Required'\r\n        //     } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.lookingForAJob)) {\r\n        //         errors.email = 'Invalid email address'\r\n        //     }\r\n        //     if (!values.password){\r\n        //         errors.password = 'Required'\r\n        //     }\r\n        //     return errors\r\n        // },\r\n        onSubmit: values => {\r\n            dispatch(changeProfileTC(values))\r\n            props.closeForm()\r\n        },\r\n    })\r\n          return (\r\n            <Grid container justifyContent={'center'}>\r\n                <Grid item justifyContent={'center'}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <FormGroup>\r\n                                <FormControlLabel label={'Looking for a job'} control={<Checkbox\r\n                                    checked={formik.values.lookingForAJob} {...formik.getFieldProps('lookingForAJob')}/>}/>\r\n\r\n                                <TextField type=\"lookingForAJobDescription\" label=\"Looking for a job description\"\r\n                                           margin=\"normal\" {...formik.getFieldProps('lookingForAJobDescription')}/>\r\n                                {formik.touched.lookingForAJobDescription && formik.errors.lookingForAJobDescription &&\r\n                                    <div style={{color: 'red'}}>{formik.errors.lookingForAJobDescription}</div>}\r\n\r\n                                <TextField type=\"aboutme\" label=\"About Me\"\r\n                                           margin=\"normal\" {...formik.getFieldProps('aboutMe')}/>\r\n                                {formik.touched.lookingForAJobDescription && formik.errors.aboutMe &&\r\n                                    <div style={{color: 'red'}}>{formik.errors.aboutMe}</div>}\r\n\r\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                    Submit\r\n                                </Button>\r\n                                <Button variant={'contained'} color={'primary'} onClick={exitHandle}>\r\n                                    Exit\r\n                                </Button>\r\n\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './Profile.module.css'\r\nimport {Posts} from \"./Posts/Posts\";\r\nimport {MyProfile} from \"./Posts/MyProfile\";\r\nimport {ProfileForm} from \"./ProfileForm\";\r\n\r\n\r\n\r\n\r\nconst Profile = () => {\r\n\r\n    let [mode, setMode]=useState(true)\r\n    const changeProfile=()=>{\r\n        setMode(false)\r\n    }\r\n    const closeForm=()=>{\r\n        setMode(true)\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            {!mode && <div className={s.form}><ProfileForm closeForm={closeForm}/></div>}\r\n            <MyProfile mode={mode} changeProfile={changeProfile}/>\r\n            <Posts/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile"],"names":["Btn","props","onClick","onChangePost","title","Post","text","map","p","index","className","s","src","alt","message","Posts","dispatch","useDispatch","allPosts","useSelector","state","profile","posts","useState","newPost","setNewPost","value","onChange","event","currentTarget","addPostAC","EditSpan","onDouble","setonDouble","setValue","Input","onBlur","changeEditSpan","e","autoFocus","color","onDoubleClick","MyProfile","isAuth","auth","myUserId","authData","id","editSpanTitle","status","useEffect","setCheckedUserTC","getStatusTC","mode","photos","large","type","target","files","length","ChangeProfilePhotoTC","ChangeFileHandler","aboutMe","lookingForAJob","lookingForAJobDescription","href","contacts","github","instagram","changeProfile","changeStatusTC","to","ProfileForm","profileInfo","userId","formik","useFormik","initialValues","fullName","vk","facebook","twitter","website","youtube","mainLink","onSubmit","values","changeProfileTC","closeForm","Grid","container","justifyContent","item","handleSubmit","FormControl","FormGroup","FormControlLabel","label","control","Checkbox","checked","getFieldProps","TextField","margin","touched","errors","style","Button","variant","setMode"],"sourceRoot":""}